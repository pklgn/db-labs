-- MySQL Script generated by MySQL Workbench
-- Thu Mar 17 20:33:36 2022
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS = @@UNIQUE_CHECKS, UNIQUE_CHECKS = 0;
SET @OLD_FOREIGN_KEY_CHECKS = @@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS = 0;
SET @OLD_SQL_MODE = @@SQL_MODE, SQL_MODE =
        'ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION';

-- -----------------------------------------------------
-- Schema lab6
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `lab6`;

-- -----------------------------------------------------
-- Schema lab6
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `lab6` DEFAULT CHARACTER SET utf8;
USE `lab6`;

-- -----------------------------------------------------
-- Table `company`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `company`;

CREATE TABLE IF NOT EXISTS `company`
(
    `id_company`  INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `name`        VARCHAR(50)  NOT NULL,
    `established` INT          NOT NULL,
    PRIMARY KEY (`id_company`)
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `dealer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `dealer`;

CREATE TABLE IF NOT EXISTS `dealer`
(
    `id_dealer`  INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `id_company` INT UNSIGNED NOT NULL,
    `name`       VARCHAR(50)  NOT NULL,
    `phone`      VARCHAR(50)  NOT NULL,
    PRIMARY KEY (`id_dealer`, `id_company`),
    CONSTRAINT `fk_dealer_company`
        FOREIGN KEY (`id_company`)
            REFERENCES `company` (`id_company`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;

CREATE INDEX `fk_dealer_company_idx` ON `dealer` (`id_company` ASC);


-- -----------------------------------------------------
-- Table `medicine`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `medicine`;

CREATE TABLE IF NOT EXISTS `medicine`
(
    `id_medicine`   INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `name`          VARCHAR(50)  NOT NULL,
    `cure_duration` SMALLINT     NOT NULL,
    PRIMARY KEY (`id_medicine`)
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `production`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `production`;

CREATE TABLE IF NOT EXISTS `production`
(
    `id_production` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `id_company`    INT UNSIGNED NOT NULL,
    `id_medicine`   INT UNSIGNED NOT NULL,
    `price`         DECIMAL      NOT NULL,
    `rating`        SMALLINT     NOT NULL,
    PRIMARY KEY (`id_production`, `id_company`, `id_medicine`),
    CONSTRAINT `fk_production_company1`
        FOREIGN KEY (`id_company`)
            REFERENCES `company` (`id_company`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_production_medicine1`
        FOREIGN KEY (`id_medicine`)
            REFERENCES `medicine` (`id_medicine`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;

CREATE INDEX `fk_production_company1_idx` ON `production` (`id_company` ASC);

CREATE INDEX `fk_production_medicine1_idx` ON `production` (`id_medicine` ASC);


-- -----------------------------------------------------
-- Table `pharmacy`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `pharmacy`;

CREATE TABLE IF NOT EXISTS `pharmacy`
(
    `id_pharmacy` INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `name`        VARCHAR(100) NOT NULL,
    `rating`      FLOAT        NULL,
    PRIMARY KEY (`id_pharmacy`)
)
    ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `order`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `order`;

CREATE TABLE IF NOT EXISTS `order`
(
    `id_order`      INT UNSIGNED NOT NULL AUTO_INCREMENT,
    `id_production` INT UNSIGNED NOT NULL,
    `id_pharmacy`   INT UNSIGNED NOT NULL,
    `id_dealer`     INT UNSIGNED NOT NULL,
    `date`          DATE         NOT NULL,
    `quantity`      INT          NOT NULL,
    PRIMARY KEY (`id_order`, `id_production`, `id_pharmacy`, `id_dealer`),
    CONSTRAINT `fk_order_production1`
        FOREIGN KEY (`id_production`)
            REFERENCES `production` (`id_production`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_order_pharmacy1`
        FOREIGN KEY (`id_pharmacy`)
            REFERENCES `pharmacy` (`id_pharmacy`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION,
    CONSTRAINT `fk_order_dealer1`
        FOREIGN KEY (`id_dealer`)
            REFERENCES `dealer` (`id_dealer`)
            ON DELETE NO ACTION
            ON UPDATE NO ACTION
)
    ENGINE = InnoDB;

CREATE INDEX `fk_order_production1_idx` ON `order` (`id_production` ASC);

CREATE INDEX `fk_order_pharmacy1_idx` ON `order` (`id_pharmacy` ASC);

CREATE INDEX `fk_order_dealer1_idx` ON `order` (`id_dealer` ASC);


SET SQL_MODE = @OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS = @OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS = @OLD_UNIQUE_CHECKS;

TRUNCATE TABLE production;

-- 1. Добавить внешние ключи.
ALTER TABLE `order`
    ADD CONSTRAINT FK_order_id_dealer
        FOREIGN KEY (id_dealer) REFERENCES dealer (id_dealer)
            ON UPDATE CASCADE;

ALTER TABLE `order`
    ADD CONSTRAINT FK_order_id_pharmacy
        FOREIGN KEY (id_pharmacy) REFERENCES pharmacy (id_pharmacy)
            ON UPDATE CASCADE;

ALTER TABLE `order`
    ADD CONSTRAINT FK_order_id_production
        FOREIGN KEY (id_production) REFERENCES production (id_production)
            ON UPDATE CASCADE;

ALTER TABLE production
    ADD CONSTRAINT FK_production_id_company
        FOREIGN KEY (id_company) REFERENCES company (id_company)
            ON UPDATE CASCADE;

ALTER TABLE production
    ADD CONSTRAINT FK_production_id_medicine
        FOREIGN KEY (id_medicine) REFERENCES medicine (id_medicine)
            ON UPDATE CASCADE;

ALTER TABLE dealer
    ADD CONSTRAINT FK_dealer_id_company
        FOREIGN KEY (id_company) REFERENCES company (id_company)
            ON UPDATE CASCADE;

-- 2. Выдать информацию по всем заказам лекарства “Кордерон” компании “Аргус” с указанием названий аптек, дат, объема заказов
SELECT ph.name, o.date, o.quantity
FROM `order` o
         JOIN production p ON o.id_production = p.id_production
         JOIN company c ON c.id_company = p.id_company AND c.name = 'Аргус'
         JOIN medicine m ON p.id_medicine = m.id_medicine AND m.name = 'Кордеон'
         JOIN pharmacy ph on o.id_pharmacy = ph.id_pharmacy
ORDER BY o.quantity;

-- 3. Дать список лекарств компании “Фарма”, на которые не были сделаны заказы до 25 января
SELECT id_medicine, name
FROM medicine m
WHERE m.id_medicine NOT IN
      (SELECT p.id_medicine
       FROM `order` o
                LEFT JOIN production p on o.id_production = p.id_production
                JOIN company c on p.id_company = c.id_company AND c.name = 'Фарма'
       WHERE o.date < '2019-01-25');

-- 4. Дать минимальный и максимальный баллы лекарств каждой фирмы, которая оформила не менее 120 заказов
SELECT p.id_company, MIN(p.rating) AS min_rating, MAX(p.rating) AS max_rating, COUNT(*) AS count
FROM `order` o
         JOIN production p on o.id_production = p.id_production
GROUP BY p.id_company
HAVING count > 120;

/* 5. Дать списки сделавших заказы аптек по всем дилерам компании “AstraZeneca”. Если у дилера нет заказов,
 в названии аптеки проставить NULL
*/
SELECT p.name, d.name
FROM `order` o
         JOIN pharmacy p on o.id_pharmacy = p.id_pharmacy
         RIGHT JOIN dealer d on d.id_dealer = o.id_dealer
         JOIN company c on c.id_company = d.id_company AND c.name = 'AstraZeneca'
GROUP BY d.name;

-- 6. Уменьшить на 20% стоимость всех лекарств, если она превышает 3000, а длительность лечения не более 7 дней
UPDATE production p
    JOIN medicine m ON p.id_medicine = m.id_medicine
SET p.price = 0.8 * p.price
WHERE p.price > 3000
  AND m.cure_duration <= 7;

-- 7. Добавить необходимые индексы
CREATE INDEX IX_production_price
    ON production (price);